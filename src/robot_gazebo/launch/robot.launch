<launch>

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
  
    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find robot_gazebo)/worlds/empty_world.world"/> --> -->
      <arg name="debug" value="$(arg debug)" /> 
      <arg name="gui" value="$(arg gui)" />
      <arg name="paused" value="$(arg paused)"/>
      <arg name="use_sim_time" value="$(arg use_sim_time)"/>
       <arg name="headless" value="$(arg headless)"/> 
    </include>
  
    <!-- Load the URDF into the ROS Parameter Server  | textfile instead of command-->
    <param name="robot_description"
        textfile='$(find robot_description)/urdf/robot_3d_camera.urdf'/>
  
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-urdf -model robot -param robot_description"/>
  
    <!-- ros_control rrbot launch file -->
    <!--include file="$(find rrbot_control)/launch/rrbot_control.launch" /-->


    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="use_gui" value="TRUE"/> -->
      <!-- <rosparam param="source_list">["/joint_states"]</rosparam>
    </node> -->
  
    <!-- Combine joint values -->
    <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/> --> -->
  
    <!-- Show in Rviz   -->
    <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find robot_description)/launch/robot.rviz"/> -->

    <rosparam file="$(find robot_control_)/config/config.yaml" command="load"/>
  
    <!-- Load controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/robot" args="joint1_position_controller  joint_state_controller"/>
  
    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen">
    <remap from="/joint_states" to="/robot/joint_states" />
  </node>
    
  
  </launch>
